% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc-scatterplots.R
\name{MCMC-scatterplots}
\alias{MCMC-scatterplots}
\alias{mcmc_pairs}
\alias{mcmc_scatter}
\title{Scatterplots of MCMC draws}
\usage{
mcmc_scatter(x, pars = character(), regex_pars = character(),
  transformations = list(), ..., size = 2.5, alpha = 0.8)

mcmc_pairs(x, np, lp, pars = character(), regex_pars = character(),
  transformations = list(), ..., condition = "accept_stat__", max_td = 10,
  size = 1, alpha = 0.8, binwidth = NULL)
}
\arguments{
\item{x}{A 3-D array, matrix, list of matrices, or data frame of MCMC draws.
The \link{MCMC-overview} page provides details on how to specify each these
allowed inputs.}

\item{pars}{An optional character vector of parameter names. (\strong{Note}:
for \code{mcmc_scatter} only two parameters can be selected.)}

\item{regex_pars}{An optional \link[=grep]{regular expression} to use for
parameter selection. Can be specified instead of \code{pars} or in addition
to \code{pars}.}

\item{transformations}{Optionally, transformations to apply to parameters
before plotting. If \code{transformations} is a function or a single string
naming a function then that function will be used to transform all
parameters. To apply transformations to particular parameters, the
\code{transformations} argument can be a named list with length equal to
the number of parameters to be transfomred. The name of each list element
should be a parameter name and the content of each list element should be a
function (or any item to match as a function via \code{\link{match.fun}},
e.g. a string naming a function). If a function is specified by its name as
a string (e.g. \code{"log"}), then it can be used to construct a new
parameter label for the appropriate parameter (e.g. \code{"log(sigma)"}).
If a function itself is specified (e.g. \code{log} or \code{function(x)
log(x)}) then \code{"t"} is used in the new parameter label to indicate
that the parameter is transformed (e.g. \code{"t(sigma)"}).}

\item{...}{Currently ignored.}

\item{size, alpha}{Passed to \code{\link[ggplot2]{geom_point}}.}

\item{np}{A molten data frame of NUTS sampler parameters, either created by
\code{\link{nuts_params}} or in the same form as the object returned by
\code{\link{nuts_params}}.}

\item{lp}{A molten data frame of draws of the log-posterior or, more
commonly, of a quantity equal to the log-posterior up to a constant.
\code{lp} should either be created via \code{\link{log_posterior}} or be an
object with the same form as the object returned by
\code{\link{log_posterior}}.}

\item{condition}{There are many options for the \code{condition} argument:
\itemize{
  \item A (possibly abbreviated) character vector of length one can be passed
  among \code{"accept_stat__"}, \code{"stepsize__"}, \code{"treedepth__"},
  \code{"n_leapfrog__"}, \code{"divergent__"}, \code{"energy__"}, or
  \code{"lp__"}, which are the sampler parameters associated with
  \code{\link{NUTS}} (and \code{"lp__"} is the log-posterior up to an
  additive constant). In this case the lower panel will plot realizations
  that are below the median of the indicated variable (or are zero in the
  case of \code{"divergent__"}) and the upper panel will plot realizations
  that are greater than or equal to the median of the indicated variable (or
  are one in the case of \code{"divergent__"}). \strong{The default is}
  \code{"accept_stat__"}.
  \item \code{NULL}, in which case it will plot roughly half of the chains in
  the lower panel and the rest in the upper panel.
  \item An integer vector can be passed to select some subset of the chains,
  of which roughly half will be plotted in the lower panel and the rest in
  the upper panel.
  \item A list of two integer vectors can be passed, each specifying a subset
  of the chains to be plotted in the lower and upper panels respectively.
  \item A single number between zero and one exclusive can be passed, which
  is interpreted as the proportion of realizations (among all chains) to plot
  in the lower panel starting with the first realization in each chain, with
  the complement (from the end of each chain) plotted in the upper panel.
  \item Finally, any logical
  vector whose length is equal to the product of the number of iterations and
  the number of chains can be passed, in which case realizations
  corresponding to FALSE and TRUE will be plotted in the lower and upper
  panel respectively.
 }}

\item{max_td}{For models fit using NUTS, the maximum treedepth allowed when
fitting the model. Defaults to \code{10}. Yellow points will be plotted to
indicate a transition that hit the maximum treedepth rather than terminated
its evolution normally.}

\item{binwidth}{For \code{mcmc_pairs}, an optional numeric value to override
the default binwidth used for the histograms along the diagonal of the plot
matrix.}
}
\value{
A ggplot object that can be further customized using the
  \pkg{ggplot2} package.
}
\description{
Scatterplots of MCMC draws. See the \strong{Plot Descriptions} section,
below, for details.
}
\details{
If \code{condition} is not \code{"divergent__"}, red points will be
superimposed onto the smoothed density plots indicating which (if any)
iterations encountered a divergent transition. Otherwise, yellow points
indicate a transition that hit the maximum treedepth rather than terminated
its evolution normally.

Draws from the warmup phase should always be discarded before calling
\code{mcmc_pairs}.
}
\section{Plot Descriptions}{

\describe{
  \item{\code{mcmc_scatter}}{
   Bivariate scatterplot of posterior draws (for two parameters).
  }
  \item{\code{mcmc_pairs}}{
  Coming soon.
  }
}
}
\examples{
# some parameter draws to use for demonstration
x <- example_mcmc_draws(params = 6)
dimnames(x)

# scatterplot of alpha vs log(sigma)
color_scheme_set("teal")
p <- mcmc_scatter(x, pars = c("alpha", "sigma"),
                  trans = list(sigma = "log"),
                  alpha = 0.5)
p + ggplot2::labs(caption = "A fascinating caption")

# add ellipse
p + ggplot2::stat_ellipse(level = 0.9, color = "gray20", size = 1)

# add contour
color_scheme_set("red")
p2 <- mcmc_scatter(x, pars = c("alpha", "sigma"))
p2 + ggplot2::stat_density_2d(color = "black")

# can also add lines/smooths
color_scheme_set("pink")
(p3 <- mcmc_scatter(x, pars = c("alpha", "beta[3]"), alpha = 0.5, size = 3))
p3 + ggplot2::geom_smooth(method = "lm", se = FALSE, color = "gray20")



}
\seealso{
Other MCMC: \code{\link{MCMC-combos}},
  \code{\link{MCMC-diagnostics}},
  \code{\link{MCMC-distributions}},
  \code{\link{MCMC-intervals}}, \code{\link{MCMC-nuts}},
  \code{\link{MCMC-overview}}, \code{\link{MCMC-recover}},
  \code{\link{MCMC-traces}}
}

