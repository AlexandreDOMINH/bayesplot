% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/color-scheme.R
\name{set_color_scheme}
\alias{get_color_scheme}
\alias{set_color_scheme}
\alias{view_color_scheme}
\title{Set, get, or view the color scheme}
\usage{
set_color_scheme(scheme)

get_color_scheme(scheme)

view_color_scheme(scheme)
}
\arguments{
\item{scheme}{For \code{set_color_scheme}, either a string naming one of the
  available color schemes or a character vector of \emph{exactly six} colors
  specifying a custom scheme (see the \strong{Custom Color Schemes} section,
  below, for more on specifying a custom scheme).

  For \code{get_color_scheme} and \code{view_color_scheme}, \code{scheme} can
  be missing (to get the current color scheme) or a string naming one of the
  preset schemes.

  Currently, the available preset color schemes are:
  \itemize{
   \item \code{"blue"}
   \item \code{"brightblue"}
   \item \code{"gray"}
   \item \code{"green"}
   \item \code{"pink"}
   \item \code{"purple"}
   \item \code{"red"} (default)
   \item \code{"teal"}
   \item \code{"yellow"}
   \item \code{"mix-x-y"}, replacing \code{x} and \code{y} with any two of
   the scheme names listed above (e.g. "mix-teal-pink", "mix-blue-red",
   etc.). The order of \code{x} and \code{y} matters, i.e., the color schemes
   "mix-blue-red" and "mix-red-blue" are not identical. There is no gaurantee
   that every possible mixed scheme will look good with every possible plot.
  }}
}
\value{
\code{set_color_scheme} has the side effect of setting the color
  scheme used for plotting. It also returns
  (\code{\link[=invisible]{invisibly}}) a list of the hexidecimal color
  values used in \code{scheme}.

  \code{get_color_scheme} returns a \code{list} of the hexadecimal color
  values (without changing the current scheme). If the \code{scheme} argument
  is not specified the returned values correspond to the current color
  scheme.

  \code{view_color_scheme} returns a ggplot object.
}
\description{
Set, get, or view the color scheme used for plotting. Choose from a preset
scheme or create your own.
}
\section{Custom Color Schemes}{
 A \pkg{bayesplot} color scheme consists of six
  colors. To specify a custom color scheme simply pass a character vector
  containing either the names of six \code{\link[grDevices]{colors}} or six
  hexidecimal color values (or a mix of names and hex values). The colors
  should be in order from lightest to darkest. See the end of the
  \strong{Examples} section for a demonstration.
}
\examples{
set_color_scheme("red")
get_color_scheme()
view_color_scheme()

get_color_scheme("brightblue")
view_color_scheme("brightblue")
view_color_scheme("purple")

view_color_scheme("gray")
get_color_scheme("gray")$light


x <- example_mcmc_draws()
mcmc_intervals(x)

set_color_scheme("teal")
view_color_scheme()
mcmc_intervals(x)

set_color_scheme("blue")
mcmc_areas(x, regex_pars = "beta")

set_color_scheme("pink")
view_color_scheme()
y <- example_y_data()
yrep <- example_yrep_draws()
ppc_stat(y, yrep, stat = "mean") + no_legend()

set_color_scheme("mix-teal-pink")
ppc_stat(y, yrep, stat = "sd") + no_legend()
mcmc_areas(x, regex_pars = "beta")

###########################
### custom color scheme ###
###########################
orange_scheme <- c("#ffebcc", "#ffcc80",
                   "#ffad33", "#e68a00",
                   "#995c00", "#663d00")
set_color_scheme(orange_scheme)
get_color_scheme()
mcmc_areas(x, regex_pars = "alpha")
mcmc_dens_overlay(x)
ppc_stat(y, yrep, stat = "var") + no_legend()

}

